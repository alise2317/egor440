import customtkinter as ctk
from tkinter import messagebox
from tkinter import messagebox, Text, Scrollbar
import re
import requests  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤

import nltk
# nltk.download('punkt')
# nltk.download('wordnet')
# nltk.download('omw-1.4')
from nltk.stem import WordNetLemmatizer

class LearningPage:
    def __init__(self, root, username, db_manager):
        self.root = root
        self.username = username
        self.db_manager = db_manager

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫–Ω–æ
        window_width = 1100
        window_height = 800
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        # x_coordinate = (screen_width // 2) - (window_width // 2)
        # y_coordinate = (screen_height // 2) - (window_height // 2)
        # self.root.geometry(f"{window_width}x{window_height}+{x_coordinate}+{y_coordinate}")
        self.root.resizable(False, False)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Ä–º–∏–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.terms = self.load_terms()

        # –°–æ–∑–¥–∞—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏
        self.tooltip = None

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–µ–º–º–∞—Ç–∏–∑–∞—Ç–æ—Ä
        self.lemmatizer = WordNetLemmatizer()

        # –°–æ–∑–¥–∞—ë–º —Ñ—Ä–µ–π–º
        self.frame = ctk.CTkFrame(self.root)
        self.frame.pack(padx=20, pady=20, fill="both", expand=True)

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        self.back_button = ctk.CTkButton(self.frame, text="ü†î", font=("Arial", 35), width=6, command=self.go_back)
        self.back_button.pack(padx=20, pady=20, anchor="nw")

        # –ü–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        self.text_name_label = ctk.CTkLabel(self.frame, text="", font=("Arial", 26, "bold"))
        self.text_name_label.pack(pady=1)

        # –°–æ–∑–¥–∞—ë–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –∏ —Å–∫—Ä–æ–ª–ª–±–∞—Ä
        self.text_box = Text(self.frame, wrap="word", font=("Arial", 17), bg="#3F2F25",fg="#FAEBD7", bd=0, height=20)
        self.text_box.pack(pady=10, fill="both", expand=True)

        self.text_scrollbar = ctk.CTkScrollbar(self.frame,button_color="#3F2F25", command=self.text_box.yview)
        self.text_scrollbar.pack(side="right", fill="y")
        self.text_box.config(yscrollcommand=self.text_scrollbar.set)

        # –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        self.text_box.configure(state="disabled")


        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Ñ—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ—Ä–µ–π–º–µ
        button_frame = ctk.CTkFrame(self.frame, fg_color = "#3F2F25")
        button_frame.pack(pady=10)  # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º button_frame –≤–Ω—É—Ç—Ä–∏ self.frame

        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–π–¥–µ–Ω–æ"
        self.completed_button = ctk.CTkButton(button_frame, text="–ü—Ä–æ–π–¥–µ–Ω–æ ‚úî", font=("Arial", 15), height=40, width=200, command=self.mark_as_completed)
        self.completed_button.pack(side="left", padx=10)

        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
        self.skip_button = ctk.CTkButton(button_frame, text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ü†ñ", font=("Arial", 15), height=40, width=200, command=self.load_next_text)
        self.skip_button.pack(side="left", padx=10)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç
        self.load_next_text()

    def go_back(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É."""
        x_coordinate = self.root.winfo_x()
        y_coordinate = self.root.winfo_y() # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.root.quit()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ü–∏–∫–ª mainloop() –æ–∫–Ω–∞ –æ–±—É—á–µ–Ω–∏—è
        self.root.destroy()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –æ–±—É—á–µ–Ω–∏—è
        from main_window import MainWindow  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        main_window = ctk.CTk()
        main_window.title("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        main_window.geometry(f"800x800+{x_coordinate}+{y_coordinate}")
        MainWindow(main_window, self.username)
        main_window.mainloop()  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª mainloop() –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞

    def mark_as_completed(self):
        """–û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π."""
        try:
            query = """
            INSERT INTO UserTexts (user_id, text_id)
            VALUES (?, ?);
            """
            user_id = self.get_user_id()
            self.db_manager.cursor.execute(query, (user_id, self.current_text_id))
            self.db_manager.conn.commit()
            self.load_next_text()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")

    def get_user_id(self):
        """–ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        user_data = self.db_manager.fetch_one(
            "SELECT id FROM User WHERE username = ?", (self.username,)
        )
        return user_data[0] if user_data else None

    def load_terms(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–µ—Ä–º–∏–Ω—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Term."""
        try:
            query = "SELECT termword FROM Term;"
            terms = [row[0] for row in self.db_manager.cursor.execute(query).fetchall()]
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Ä–º–∏–Ω—ã –ø–æ –¥–ª–∏–Ω–µ (–æ—Ç –¥–ª–∏–Ω–Ω—ã—Ö –∫ –∫–æ—Ä–æ—Ç–∫–∏–º), —á—Ç–æ–±—ã —Å–Ω–∞—á–∞–ª–∞ –∏—Å–∫–∞—Ç—å —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è
            terms.sort(key=len, reverse=True)
            return terms
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Ä–º–∏–Ω—ã: {e}")
            return []

    def load_next_text(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –≤—ã–¥–µ–ª—è–µ–º —Ç–µ—Ä–º–∏–Ω—ã."""
        try:
            query = """
            SELECT id, name, content
            FROM Text
            WHERE id NOT IN (SELECT text_id FROM UserTexts WHERE user_id = ?)
            ORDER BY RANDOM() LIMIT 1;
            """
            user_id = self.get_user_id()
            if user_id is None:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            result = self.db_manager.cursor.execute(query, (user_id,)).fetchone()

            if result:
                self.current_text_id, self.text_name, self.text_content = result
                self.text_name_label.configure(text=self.text_name)
                self.display_text_with_highlighting()
            else:
                self.text_name_label.configure(text="–¢–µ–∫—Å—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
                self.text_box.delete("1.0", "end")
                self.text_box.insert("1.0", "–¢–µ–∫—Å—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—Å—Ç: {e}")

    def lemmatize_word(self, word):
        """–ü—Ä–∏–≤–æ–¥–∏–º —Å–ª–æ–≤–æ –∫ –±–∞–∑–æ–≤–æ–π —Ñ–æ—Ä–º–µ (–ª–µ–º–º–∞—Ç–∏–∑–∏—Ä—É–µ–º)."""
        return self.lemmatizer.lemmatize(word.lower())

    def display_text_with_highlighting(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –≤—ã–¥–µ–ª—è–µ–º —Ç–µ—Ä–º–∏–Ω—ã, –Ω–æ –≤—ã–¥–µ–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
        self.text_box.configure(state="normal")
        self.text_box.delete("1.0", "end")
        self.text_box.insert("1.0", self.text_content)

        # –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–µ—Ä–º–∏–Ω–æ–≤ –±–µ–∑ –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        for term in self.terms:
            pattern = r'\b' + re.escape(term) + r'\b'
            matches = list(re.finditer(pattern, self.text_content, re.IGNORECASE))

            for match in matches:
                start_index = f"1.0 + {match.start()}c"
                end_index = f"1.0 + {match.end()}c"
                tag_name = f"term_{term}"
                self.text_box.tag_add(tag_name, start_index, end_index)
                self.text_box.tag_config(tag_name, foreground="#708090", underline=True)
                self.text_box.tag_bind(tag_name, "<Enter>", lambda event, term=term: self.on_word_hover(event, term))
                self.text_box.tag_bind(tag_name, "<Leave>", self.on_word_leave)
                self.text_box.tag_bind(tag_name, "<Button-1>", self.on_word_click)

        # –õ–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —Ç–µ—Ä–º–∏–Ω–∞–º–∏
        terms_lower = set(term.lower() for term in self.terms)
        words = re.findall(r'\b\w+\b', self.text_content)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ü–µ–ª—ã—Ö —Å–ª–æ–≤
        for word in words:
            lemmatized_word = self.lemmatize_word(word)
            for term in self.terms:
                # –ï—Å–ª–∏ –ª–µ–º–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ—Ä–º–∏–Ω–æ–º, –≤—ã–¥–µ–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ
                if lemmatized_word.lower() == term.lower() and word.lower() != term.lower() and word.lower() not in terms_lower:
                    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ü–µ–ª–æ–≥–æ —Å–ª–æ–≤–∞ (–Ω–µ —á–∞—Å—Ç–∏ —Å–ª–æ–≤–∞)
                    pattern = r'\b' + re.escape(word) + r'\b'
                    match = re.search(pattern, self.text_content, re.IGNORECASE)
                    if match:
                        start_index = f"1.0 + {match.start()}c"
                        end_index = f"1.0 + {match.end()}c"
                        tag_name = f"term_lemma_{lemmatized_word}"
                        self.text_box.tag_add(tag_name, start_index, end_index)
                        self.text_box.tag_config(tag_name, foreground="#708090", underline=True)
                        self.text_box.tag_bind(tag_name, "<Enter>",lambda event, term=word: self.on_word_hover(event, term))
                        self.text_box.tag_bind(tag_name, "<Leave>", self.on_word_leave)
                        self.text_box.tag_bind(tag_name, "<Button-1>", self.on_word_click)

        self.text_box.configure(state="disabled")

    def get_translation(self, word):
        """
            –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å–ª–æ–≤–æ —Å –ø–æ–º–æ—â—å—é Yandex.Translate API.
            –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ API-–∫–ª—é—á.
            """
        # –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∏–∂–µ
        API_KEY = "AQVN2TUgLk6tgZnl226osrv4aB460GgrhZZU_tSX"  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à API-–∫–ª—é—á Yandex Translate
        # FOLDER_ID = "<–ò–î–ï–ù–¢–ò–§–ò–ö–ê–¢–û–†_–ö–ê–¢–ê–õ–û–ì–ê>"  # –£–∫–∞–∂–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∞—à–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ - –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Å–µ—Ä–≤–∏—Å–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ
        TARGET_LANGUAGE = "ru"  # –Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ (–∏–∑–º–µ–Ω–∏—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)

        # URL Yandex Translate API
        url = "https://translate.api.cloud.yandex.net/translate/v2/translate"

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API-–∫–ª—é—á–∞
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Api-Key {API_KEY}"
        }

        # –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        body = {
            "targetLanguageCode": TARGET_LANGUAGE,
            "texts": [word],
            # "folderId": FOLDER_ID
        }

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Yandex Translate API
            response = requests.post(url, json=body, headers=headers)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            if response.status_code == 200:
                data = response.json()
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                translation = data['translations'][0]['text']
                return translation
            else:
                return f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {response.status_code} - {response.text}"

        except Exception as e:
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥: {e}"

    def on_word_hover(self, event, term):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ."""
        translation = self.get_translation(term)

        # –°–æ–∑–¥–∞—ë–º –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
        self.show_tooltip(event, translation)

    def on_word_leave(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ —É—Ö–æ–¥–µ –∫—É—Ä—Å–æ—Ä–∞ —Å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞."""
        self.hide_tooltip()

    def show_tooltip(self, event, translation):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞–¥ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º —Å–ª–æ–≤–æ–º."""
        # –°–æ–∑–¥–∞—ë–º –º–µ—Ç–∫—É –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
        if not hasattr(self, "tooltip") or self.tooltip is None:
            self.tooltip = ctk.CTkLabel(
                self.text_box,
                text=translation,
                fg_color="#B8860B",
                text_color="#000000",
                corner_radius=5,
                font=("Arial", 12)
            )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–∂–µ—Ç–µ
        index = self.text_box.index(f"@{event.x},{event.y}")
        bbox = self.text_box.bbox(index)

        if bbox:
            x, y, width, height = bbox
            # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –Ω–∞–¥ —Å–ª–æ–≤–æ–º
            try:
                self.tooltip.configure(text=translation)  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                self.tooltip.place(x=x, y=y)
                self.tooltip.lift()  # –ü–æ–¥–Ω–∏–º–∞–µ–º –≤–∏–¥–∂–µ—Ç –Ω–∞–¥ –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏: {e}")

    def hide_tooltip(self):
        """–°–∫—Ä—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É."""
        if hasattr(self, "tooltip") and self.tooltip is not None:
            try:
                self.tooltip.place_forget()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏: {e}")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    def on_word_click(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
            index = self.text_box.index(f"@{event.x},{event.y}")
            word = self.text_box.get(f"{index} wordstart", f"{index} wordend").strip().lower()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–ª–æ–≤–æ –≤ —Ç–∞–±–ª–∏—Ü–µ Word
            word_data = self.db_manager.fetch_one(
                "SELECT id, translation FROM Word WHERE engword = ?", (word,)
            )

            if word_data is None:
                # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ API, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ
                translation = self.get_translation(word)
                if not translation:
                    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞.")
                    return

                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ —Ç–∞–±–ª–∏—Ü—É Word
                self.db_manager.execute(
                    "INSERT INTO Word (engword, translation) VALUES (?, ?)",
                    (word, translation)
                )
                word_id = self.db_manager.get_last_inserted_id()
            else:
                word_id = word_data[0]
                translation = word_data[1]

            # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = self.get_user_id()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ Favorites
            favorite_exists = self.db_manager.fetch_one(
                "SELECT id FROM Favorites WHERE user_id = ? AND word_id = ?",
                (user_id, word_id)
            )

            if favorite_exists is None:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                self.db_manager.execute(
                    "INSERT INTO Favorites (user_id, word_id) VALUES (?, ?)",
                    (user_id, word_id)
                )
                self.show_in_app_notification(f"–°–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")
            else:
                self.show_in_app_notification(f"–°–ª–æ–≤–æ '{word}' —É–∂–µ –µ—Å—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}")

    # –æ–∫–Ω–æ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
    def show_in_app_notification(self, message):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        # –°–æ–∑–¥–∞—ë–º –º–µ—Ç–∫—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification_label = ctk.CTkLabel(
            self.frame,
            text=message,
            fg_color="#8B4513",
            text_color="#B8860B",
            corner_radius=10,
            font=("Arial", 14, "bold")
        )
        # –†–∞–∑–º–µ—â–∞–µ–º –º–µ—Ç–∫—É –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –æ–∫–Ω–∞
        notification_label.place(relx=0.5, rely=0.05, anchor="center")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ after() –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫—Ä—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        self.root.after(2000, notification_label.destroy)