import customtkinter as ctk
from tkinter import messagebox


class DictionaryPage:
    def __init__(self, root, username, db_manager):
        self.root = root
        self.username = username
        self.db_manager = db_manager

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫–Ω–æ
        window_width = 800
        window_height = 800
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        # self.root.geometry(f"{window_width}x{window_height}+"
        #                    f"{(screen_width - window_width) // 2}+"
        #                    f"{(screen_height - window_height) // 2}")
        self.root.resizable(False, False)

        # –°–æ–∑–¥–∞—ë–º —Ñ—Ä–µ–π–º
        self.frame = ctk.CTkFrame(self.root)
        self.frame.pack(padx=20, pady=20, fill="both", expand=True)

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        self.back_button = ctk.CTkButton(self.frame, text="ü†î", font=("Arial", 35), width=6, command=self.go_back)
        self.back_button.pack(padx=20, pady=20, anchor="nw")

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label = ctk.CTkLabel(self.frame, text="–ú–æ–∏ —Å–ª–æ–≤–∞", font=("Arial", 30))
        self.title_label.pack(pady=10)

        # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—É—é —Ç–∞–±–ª–∏—Ü—É
        self.table_frame = ctk.CTkScrollableFrame(self.frame, width=760, height=600)
        self.table_frame.pack(fill="both", expand=True, padx=10, pady=10)

        self.create_table_headers()
        self.load_favorites()

    def create_table_headers(self):
        """–°–æ–∑–¥–∞—ë–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã."""
        headers = ["–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ", "–ü–µ—Ä–µ–≤–æ–¥", "–î–µ–π—Å—Ç–≤–∏–µ"]
        for col, text in enumerate(headers):
            header = ctk.CTkLabel(self.table_frame, text=text, font=("Arial", 16), anchor="center")
            header.grid(row=0, column=col, padx=1, pady=1, sticky="nsew")

        # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –ø–æ —à–∏—Ä–∏–Ω–µ
        for col in range(len(headers)):
            self.table_frame.grid_columnconfigure(col, weight=1)

    def load_favorites(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_query = "SELECT id FROM User WHERE username = ?"
        user = self.db_manager.fetch_one(user_query, (self.username,))
        if not user:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        user_id = user[0]

        query = """
            SELECT Word.id, Word.engword, Word.translation
            FROM Favorites
            JOIN Word ON Favorites.word_id = Word.id
            WHERE Favorites.user_id = ?
        """
        favorites = self.db_manager.fetch_all(query, (user_id,))

        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        for widget in self.table_frame.winfo_children():
            widget.destroy()

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü—É
        for row, (word_id, engword, translation) in enumerate(favorites, start=1):
            # –°–æ–∑–¥–∞–Ω–∏–µ —è—á–µ–µ–∫ —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
            for col, text in enumerate([engword, translation]):
                cell_frame = ctk.CTkFrame(self.table_frame, border_width=1, corner_radius=0)
                cell_frame.grid(row=row, column=col, sticky="nsew", padx=1, pady=1)
                label = ctk.CTkLabel(cell_frame, text=text, font=("Arial", 14))
                label.pack(fill="both", expand=True)

            # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
            button_frame = ctk.CTkFrame(self.table_frame, border_width=1, corner_radius=0)
            button_frame.grid(row=row, column=2, sticky="nsew", padx=1, pady=1)
            delete_button = ctk.CTkButton(
                button_frame, text="–£–¥–∞–ª–∏—Ç—å", font=("Arial", 12),
                command=lambda wid=word_id: self.delete_favorite(wid, row)
            )
            delete_button.pack(fill="both", expand=True)

        # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –ø–æ —à–∏—Ä–∏–Ω–µ
        for col in range(3):
            self.table_frame.grid_columnconfigure(col, weight=1)

    def delete_favorite(self, word_id, row):
        """–£–¥–∞–ª—è–µ—Ç —Å–ª–æ–≤–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ."""
        user_query = "SELECT id FROM User WHERE username = ?"
        user = self.db_manager.fetch_one(user_query, (self.username,))
        if not user:
            return
        user_id = user[0]

        delete_query = "DELETE FROM Favorites WHERE user_id = ? AND word_id = ?"
        self.db_manager.execute(delete_query, (user_id, word_id))

        self.show_in_app_notification(f"–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.")
        self.load_favorites()

    def go_back(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É."""
        x_coordinate = self.root.winfo_x()
        y_coordinate = self.root.winfo_y()
        self.root.quit()
        self.root.destroy()
        from main_window import MainWindow
        main_window = ctk.CTk()
        main_window.title("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        main_window.geometry(f"800x800+{x_coordinate}+{y_coordinate}")
        MainWindow(main_window, self.username)
        main_window.mainloop()

    def show_in_app_notification(self, message):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        # –°–æ–∑–¥–∞—ë–º –º–µ—Ç–∫—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification_label = ctk.CTkLabel(
            self.frame,
            text=message,
            fg_color="#8B4513",
            text_color="#B8860B",
            corner_radius=10,
            font=("Arial", 14, "bold")
        )
        # –†–∞–∑–º–µ—â–∞–µ–º –º–µ—Ç–∫—É –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –æ–∫–Ω–∞
        notification_label.place(relx=0.5, rely=0.05, anchor="center")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ after() –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫—Ä—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        self.root.after(2000, notification_label.destroy)
