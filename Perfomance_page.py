import customtkinter as ctk
import matplotlib
from tkinter import messagebox
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg


class PerfomancePage:
    def __init__(self, root, username, db_manager):
        self.root = root
        self.username = username
        self.db_manager = db_manager

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫–Ω–æ
        window_width = 800
        window_height = 800
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        # self.root.geometry(f"{window_width}x{window_height}+"
        #                    f"{(screen_width - window_width) // 2}+"
        #                    f"{(screen_height - window_height) // 2}")
        self.root.resizable(False, False)

        # –°–æ–∑–¥–∞—ë–º —Ñ—Ä–µ–π–º
        self.frame = ctk.CTkFrame(self.root)
        self.frame.pack(padx=20, pady=20, fill="both", expand=True)

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        self.back_button = ctk.CTkButton(self.frame, text="ü†î", font=("Arial", 35), width=6, command=self.go_back)
        self.back_button.pack(padx=20, pady=20, anchor="nw")

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label = ctk.CTkLabel(self.frame, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", font=("Arial", 30))
        self.title_label.pack(pady=10)

        # –§—Ä–µ–π–º –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        self.stats_frame = ctk.CTkFrame(self.frame)
        self.stats_frame.pack(pady=20, padx=20, fill="both", expand=True)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.load_statistics()

    def load_statistics(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –µ—ë –≤ —Ç–∞–±–ª–∏—Ü–µ."""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = {
            "–í—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ": "-",
            "–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤": "-",
            "–ò–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ": "-",
            "–ü—Ä–æ–π–¥–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π": "-",
            "–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å": "-",
            "–¢–µ–∫—Å—Ç–æ–≤ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ": "-"
        }

        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_query = "SELECT id, exercise_cnt, correct_exercise_cnt, daily_text FROM User WHERE username = ?"
            user = self.db_manager.fetch_one(user_query, (self.username,))
            if not user:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            user_id, exercise_cnt, correct_exercise_cnt, daily_text = user

            # –í—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ
            stats_query = "SELECT COUNT(*) FROM UserTexts WHERE user_id = ?"
            stats["–í—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ"] = self.db_manager.fetch_one(stats_query, (user_id,))[0]

            # –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤
            total_texts_query = "SELECT COUNT(*) FROM Text"
            total_texts = self.db_manager.fetch_one(total_texts_query)[0]
            stats["–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤"] = (
                f"{(stats['–í—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ'] / total_texts * 100):.2f}%" if total_texts > 0 else "-"
            )

            # –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ
            favorites_query = "SELECT COUNT(*) FROM Favorites WHERE user_id = ?"
            stats["–ò–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ"] = self.db_manager.fetch_one(favorites_query, (user_id,))[0]

            # –ü—Ä–æ–π–¥–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
            stats["–ü—Ä–æ–π–¥–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"] = exercise_cnt or "-"

            # –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
            stats["–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å"] = (
                f"{(correct_exercise_cnt / exercise_cnt * 100):.2f}%" if exercise_cnt > 0 else "-"
            )

            # –¢–µ–∫—Å—Ç–æ–≤ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ
            secured_texts_query = "SELECT COUNT(*) FROM UserTexts WHERE user_id = ? AND exercise = 1"
            stats["–¢–µ–∫—Å—Ç–æ–≤ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ"] = self.db_manager.fetch_one(secured_texts_query, (user_id,))[0]

            # –ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫
            self.create_chart(daily_text)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")
            return

        # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É
        for idx, (label, value) in enumerate(stats.items()):
            stat_label = ctk.CTkLabel(self.stats_frame, text=label, font=("Arial", 20), anchor="w")
            stat_label.grid(row=idx, column=0, padx=10, pady=5, sticky="w")
            stat_value = ctk.CTkLabel(self.stats_frame, text=value, font=("Arial", 20), anchor="e")
            stat_value.grid(row=idx, column=1, padx=10, pady=5, sticky="e")

    def create_chart(self, daily_text):
        """–°–æ–∑–¥–∞—ë—Ç –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ—à–µ–Ω–∏–π."""
        if not daily_text:
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö
        try:
            data = [int(x) for x in daily_text if x in "01"]
        except ValueError:
            data = []

        if not data:
            return

        correct = data.count(1)
        incorrect = data.count(0)

        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        figure = Figure(figsize=(6, 3), dpi=150, facecolor='#3F2F25')
        ax = figure.add_subplot(111)
        ax.pie(
            [correct, incorrect],
            labels=["–í–µ—Ä–Ω—ã–µ", "–ù–µ–≤–µ—Ä–Ω—ã–µ"],
            autopct="%1.1f%%",
            colors=["#6B8E23", "#A52A2A"],
            startangle=90,
            textprops={"color": "#FFF0F5"}
        )
        ax.set_title("–†–µ—à–µ–Ω–∏—è", color="#FFF0F5")

        # –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –æ–∫–Ω–æ
        chart_canvas = FigureCanvasTkAgg(figure, self.frame)
        chart_canvas.get_tk_widget().pack(pady=20)

    def go_back(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É."""
        x_coordinate = self.root.winfo_x()
        y_coordinate = self.root.winfo_y()
        self.root.quit()
        self.root.destroy()
        from main_window import MainWindow
        main_window = ctk.CTk()
        main_window.title("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        main_window.geometry(f"800x800+{x_coordinate}+{y_coordinate}")
        MainWindow(main_window, self.username)
        main_window.mainloop()
