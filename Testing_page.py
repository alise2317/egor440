import customtkinter as ctk
import random
import re
from tkinter import Text, messagebox


class TestingPage:
    def __init__(self, root, username, db_manager):
        self.root = root
        self.username = username
        self.db_manager = db_manager
        self.current_text_id = None
        self.words_to_insert = []
        self.selected_text = ""
        self.selected_word_positions = []
        self.user_answers = {}
        self.current_word = None  # –¢–µ–∫—É—â–µ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
        self.current_button = None  # –¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫–Ω–æ
        window_width = 1100
        window_height = 800
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        # self.root.geometry(f"{window_width}x{window_height}+"
        #                    f"{(screen_width - window_width) // 2}+"
        #                    f"{(screen_height - window_height) // 2}")
        self.root.resizable(False, False)

        # –°–æ–∑–¥–∞—ë–º —Ñ—Ä–µ–π–º
        self.frame = ctk.CTkFrame(self.root)
        self.frame.pack(padx=20, pady=20, fill="both", expand=True)

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        self.back_button = ctk.CTkButton(self.frame, text="ü†î", font=("Arial", 35), width=6, command=self.go_back)
        self.back_button.pack(padx=20, pady=2, anchor="nw")

        # –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.text_display = Text(self.frame, wrap="word", font=("Arial", 15), bg="#3F2F25", fg="#FAEBD7")
        self.text_display.pack(pady=10, padx=1, fill="both", expand=True)
        self.text_display.bind("<Button-1>", self.handle_space_click)
        self.text_display.config(state="disabled")  # –î–µ–ª–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º

        # –§—Ä–µ–π–º —Å–æ —Å–ª–æ–≤–∞–º–∏
        self.words_frame = ctk.CTkFrame(self.frame, height=50, fg_color = "#3F2F25")
        self.words_frame.pack(pady=5, fill="x")

        self.check_button = ctk.CTkButton(self.frame, text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", height=40, width=200, command=self.check_answers)
        self.check_button.pack(side="left", padx=10, pady=1)

        self.reset_button = ctk.CTkButton(self.frame, text="–°–±—Ä–æ—Å", height=40, width=200, command=self.reset_text)
        self.reset_button.pack(side="left", padx=10, pady=1)

        self.next_button = ctk.CTkButton(self.frame, text="–î–∞–ª–µ–µ", height=40, width=200, command=self.load_next_text)
        self.next_button.pack(side="right", padx=10, pady=1)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        self.load_text()

    def go_back(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É."""
        x_coordinate = self.root.winfo_x()
        y_coordinate = self.root.winfo_y()
        self.root.quit()
        self.root.destroy()
        from main_window import MainWindow
        main_window = ctk.CTk()
        main_window.title("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        main_window.geometry(f"800x800+{x_coordinate}+{y_coordinate}")
        MainWindow(main_window, self.username)
        main_window.mainloop()

    def load_text(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç —Å exercise=0."""
        query = """
        SELECT ut.text_id, t.content 
        FROM UserTexts ut
        JOIN Text t ON ut.text_id = t.id
        WHERE ut.user_id = (SELECT id FROM User WHERE username = ?)
          AND ut.exercise = 0
        ORDER BY RANDOM()
        LIMIT 1;
        """
        result = self.db_manager.fetch_one(query, (self.username,))
        if not result:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.")
            self.go_back()
            return

        self.current_text_id, self.selected_text = result
        self.load_terms()
        self.process_text()

    def load_terms(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Ä–º–∏–Ω—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Term."""
        query = "SELECT termword FROM Term;"
        terms = self.db_manager.fetch_all(query)
        if terms:
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Å–ª–æ–≤–∞
            term_words = [term[0] for term in terms if re.match(r"^\w+$", term[0])]
            self.terms_to_use = term_words
        else:
            self.terms_to_use = []

    def process_text(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç, –≤—ã–¥–µ–ª—è—è –¥–æ 10 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤."""
        words_in_text = re.findall(r'\b\w+\b', self.selected_text)
        terms_in_text = [term for term in self.terms_to_use if term in words_in_text]

        # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–≤
        terms_in_text = list(set(terms_in_text))

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Ä–º–∏–Ω–æ–≤ –¥–æ 10
        if len(terms_in_text) > 10:
            terms_in_text = random.sample(terms_in_text, 10)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ initial_words_to_insert, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç
        if not hasattr(self, "initial_words_to_insert"):
            self.initial_words_to_insert = terms_in_text[:]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ—Ä–º–∏–Ω–æ–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
        self.initial_words_count = len(terms_in_text)

        self.words_to_insert = terms_in_text  # –°–ø–∏—Å–æ–∫ —Ç–µ—Ä–º–∏–Ω–æ–≤ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
        self.contextual_regexes = []
        for word in self.words_to_insert:
            start_index = self.selected_text.find(word)
            if start_index != -1:
                before = self.selected_text[max(0, start_index - 3):start_index]
                after = self.selected_text[start_index + len(word):start_index + len(word) + 3]
                regex = rf"(?<={re.escape(before)})\w+(?={re.escape(after)})"
                self.contextual_regexes.append((regex, word))

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏
        self.selected_word_positions = []
        text_to_display = self.selected_text

        for word in self.words_to_insert:
            start_index = text_to_display.find(word)
            if start_index != -1:
                end_index = start_index + len(word)
                self.selected_word_positions.append((start_index, end_index))
                text_to_display = text_to_display[:start_index] + "___" + text_to_display[end_index:]

        self.cleared_text = text_to_display  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
        self.update_text_display(text_to_display)
        self.update_words_list()

    def update_text_display(self, text):
        """–û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏."""
        self.text_display.config(state="normal")
        self.text_display.delete("1.0", "end")
        self.text_display.insert("1.0", text)
        self.text_display.config(state="disabled")

    def update_words_list(self):
        """–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤, —Ä–∞–∑–º–µ—â–∞—è –∏—Ö –≤ –¥–≤–∞ —Ä—è–¥–∞."""
        for widget in self.words_frame.winfo_children():
            widget.destroy()

        row1_frame = ctk.CTkFrame(self.words_frame, height=20, fg_color = "#3F2F25")
        row1_frame.pack(side="top", fill="x", pady=3)

        row2_frame = ctk.CTkFrame(self.words_frame, height=20, fg_color = "#3F2F25")
        row2_frame.pack(side="top", fill="x", pady=3)

        for i, word in enumerate(self.words_to_insert):
            # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É
            word_button = ctk.CTkButton(
                row1_frame if i < 5 else row2_frame,
                text=word,
                fg_color="#B8860B"
            )
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ—ë –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
            word_button.configure(command=lambda w=word, b=word_button: self.select_word(w, b))
            word_button.pack(side="left", padx=5)

    def select_word(self, word, button):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–ª–æ–≤–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏."""
        if self.current_button:
            self.current_button.configure(fg_color='#B8860B')  # –°–Ω–∏–º–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–Ω–æ–ø–∫–∏

        if self.current_word == word:  # –û—Ç–º–µ–Ω—è–µ–º –≤—ã–±–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
            self.current_word = None
            self.current_button = None
        else:
            self.current_word = word
            self.current_button = button
            self.current_button.configure(fg_color="#808000")  # –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É

    def handle_space_click(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ —Ç–µ–∫—Å—Ç –ø–æ –º–µ—Å—Ç—É –∫–ª–∏–∫–∞."""
        if self.current_word is None:
            # messagebox.showinfo("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ.")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ–∑–∏—Ü–∏–∏, –∫—É–¥–∞ –∫–ª–∏–∫–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        index = self.text_display.index(f"@{event.x},{event.y}")
        line, char = map(int, index.split("."))  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ —Å–∏–º–≤–æ–ª

        self.text_display.config(state="normal")  # –î–µ–ª–∞–µ–º –ø–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º
        current_line = self.text_display.get(f"{line}.0", f"{line}.end")  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É —Ç–µ–∫—Å—Ç–∞

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º "___"
        if current_line[char:char + 3] == "___":
            self.text_display.delete(f"{line}.{char}", f"{line}.{char + 3}")  # –£–¥–∞–ª—è–µ–º "___"
            self.text_display.insert(f"{line}.{char}", self.current_word)  # –í—Å—Ç–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ
            self.words_to_insert.remove(self.current_word)  # –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
            self.update_words_list()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
            self.current_word = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ
            self.current_button = None
        # else:
        #     messagebox.showinfo("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ —Å '___'.")  # –ï—Å–ª–∏ –∫–ª–∏–∫ –Ω–µ –ø–æ "___"

        self.text_display.config(state="disabled")  # –ë–ª–æ–∫–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏

    def reset_text(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤."""
        self.words_to_insert = self.initial_words_to_insert[:]  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤
        self.current_word = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
        self.current_button = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–Ω–æ–ø–∫—É
        self.update_text_display(self.cleared_text)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        self.update_words_list()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫

    def check_answers(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤."""
        text_content = self.text_display.get("1.0", "end-1c")  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç

        if "___" in text_content:
            self.show_notification("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø—Ä–æ–ø—É—Å–∫–∏!")
            return

        self.text_display.config(state="normal")  # –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        correct_count = 0
        total_count = len(self.words_to_insert)
        result_sequence = []  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏

        # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –∫–∞–∂–¥–æ–º—É –∏–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤
        for regex, correct_word in self.contextual_regexes:
            match = re.search(regex, text_content)
            if not match:
                result_sequence.append("0")
                continue

            start, end = match.start(), match.end()
            inserted_word = text_content[start:end].strip()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
            if inserted_word == correct_word:
                self.text_display.tag_add("correct", f"1.0+{start}c", f"1.0+{end}c")
                correct_count += 1
                result_sequence.append("1")
            else:
                self.text_display.tag_add("incorrect", f"1.0+{start}c", f"1.0+{end}c")
                result_sequence.append("0")

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏
        self.text_display.tag_config("correct", foreground="green")
        self.text_display.tag_config("incorrect", foreground="red")
        self.text_display.config(state="disabled")  # –ë–ª–æ–∫–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.update_statistics(correct_count, total_count, "".join(result_sequence))

        # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        self.check_button.pack_forget()
        self.reset_button.pack_forget()

    def update_statistics(self, correct_count, total_count, result_sequence):
        """–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞."""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—Å—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ UserTexts
        if correct_count == total_count:
            query = "UPDATE UserTexts SET exercise = 1 WHERE text_id = ?"
            self.db_manager.execute_query(query, (self.current_text_id,))

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        query = """
        UPDATE User
        SET exercise_cnt = exercise_cnt + ?,
            correct_exercise_cnt = correct_exercise_cnt + ?,
            daily_text = COALESCE(daily_text, '') || ?
        WHERE username = ?
        """
        self.db_manager.execute_query(query, (total_count, correct_count, result_sequence, self.username))

    def show_notification(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞."""
        notification_label = ctk.CTkLabel(self.frame, text=message, fg_color="#8B4513",text_color="#B8860B", corner_radius=10, font=("Arial", 14))
        notification_label.place(relx=0.5, rely=0.05, anchor="center")

        # –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        self.frame.after(2000, notification_label.destroy)

    def load_next_text(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç."""
        self.load_text()